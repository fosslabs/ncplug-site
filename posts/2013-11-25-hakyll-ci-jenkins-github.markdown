---
title: Непрерывная интеграция сайта на Hakyll
tags: github, jenkins, hakyll, hsenv, continous integration
---

Hakyll --- движок для статического сайта. Но запускать компиляцию руками при каждом коммите --- не комильфо.

Поскольку у нас уже был сервер непрерывной интеграции Jenkins, я настроил репозиторий на Github, специальную виртуальную
машину и Jenkins для авторазворачивания сайта.

<!--more-->

Виртуальная машина
------------------

Собственно, виртуальная машина использовалась потому, что не хотелось слишком загрязнять собственно сервер. Она у нас
уже работала для разных проектов на Haskell, вот я и добавил ещё один.

Простейшей задачей стало добавление этой машины к нодам, на которых можно запускать задачи Jenkins. Для этого в
администраторском интерфейсе Jenkins есть специальный раздел: "Настроить Jenkins => Управление средами сборки". Там
можно добавить новую машину, написать как туда соединяться (например, по SSH), описать используемые логины/пароли/ключи.

На машине для запуска задач должен иметься JRE.

hsenv
-----

Чтобы зависимости нескольких проектов не конфликтовали, лучше использовать что-то вроде песочниц. Я использовал hsenv,
который ставится, очевидно, так:
```shell
cabal install hsenv
```

Точнее, на самом деле вначале я использовал песочницы самого Cabal, обновив его до 1.18. Но оказалось, что нужно часть
движка компилировать при помощи `ghc --make site.hs`, а для этого ghc должен видеть пакет hakyll. Поэтому пришлось
вернуться к hsenv.

Активировав hsenv, я поставил hakyll:
```shell
source .hsenv/bin/activate
cabal install hakyll
```

В процессе пару раз ругал себя за то, что не исправил старые проблемы. Для машины стоило дать больше оперативной памяти,
гигабайта два хотя бы. А то сделал файл со свопом, и очень незаметно закончилось место, ghc вылетал с Exit Failure 1.
Удалил файл со свопом, при компиляции pandoc закончилась оперативка, ghc вылетал с Exit Failure 9. Пришлось снова
создавать своп, но поменьше. А до изменения размера памяти у машины руки так и не дошли.

Плагин Jenkins для поддержки git
--------------------------------

Оказалось, что почему--то в Jenkins не было плагина для git, пришлось его добавить через "Настроить Jenkins => Управление
плагинами". Ничего хитрого, две галочки, одна для плагина, другая для перезагрузки Jenkins.

Скрипт компиляции
-----------------

Где--то я читал, что в настройках задачи Jenkins в шагах сборки лучше запускать скрипты, чем прописывать те же команды.
Возможно, из--за удобства тестирования. Поэтому всегда стараюсь писать скрипт.

Логика скрипта простая: если `site.hs` новее, чем `site`, подключить hsenv, скомпилировать site, сделать site rebuild.
Иначе сделать build

```shell
#!/bin/bash

if [ site.hs -nt site ]
then
    source .hsenv/bin/activate
    ghc --make site.hs
    ./site rebuild
else
    ./site build
fi
```

Задача Jenkins
--------------

Как и многое в Jenkins, здесь всё просто и настраивается мышкой.

Нужно указать репозиторий ([наш](http://github.com/fosslabs/ncplug-site) на github), поставить флажок "Опрашивать SCM об
изменениях".

Указать машину, на которой запускать задачу (здесь --- настроенную виртуалку с Haskell).

Для сборки указать скрипт из предыдущего пункта.

После сборки --- скопировать директорию `_site` по FTP на основной сервер. Опционально --- отправить письмо сломавшему
сборку, картинки доброго или злого Дженкинса на странице задачи (плагин Emotional Jenkins), статус сборки (Embeddable Build
Status, появляется отдельная вкладка на странице задачи)

Настройка репозитория на GitHub
-------------------------------

В настройках репозитория есть вкладка "Service Hooks"

Нужно выбрать плагин "Jenkins (Git plugin)", добавить путь к серверу непрерывной интеграции. Не забыть поставить флажок
"Active".

Заключение
----------

Ну вот и всё, осталось протестировать весь процесс.

На мой взгляд, описание всего процесса настройки получилось страшнее самой настройки. На самом деле, всё практически
тривиально.

Собственно, эта статья должна ещё раз, в "боевых" условиях проверить авторазворачивание. Если в подвале страницы будет
гореть зелёная лампочка, значит, всё развернулось успешно.

